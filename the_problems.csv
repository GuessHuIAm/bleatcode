Number;Subject;Description
1;String / HelloName;Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!"`helloName("Bob") → "Hello Bob!"`helloName("X") → "Hello X!"
2;String / makeOutWord;Given an "out" string length 4, such as "<<>>", and a word, return a new string where the word is in the middle of the out string, e.g. "<<word>>". Note: use str.substring(i, j) to extract the String starting at index i and going up to but not including index j.`makeOutWord("<<>>", "Yay") → "<<Yay>>"`makeOutWord("<<>>", "WooHoo") → "<<WooHoo>>"`makeOutWord("[[]]", "word") → "[[word]]"
3;String / doubChar;Given a string, return a string where for every char in the original, there are two chars.`doubleChar("The") → "TThhee"`doubleChar("AAbb") → "AAAAbbbb"`doubleChar("Hi-There") → "HHii--TThheerree"
4;String / countCode;Return the number of times that the string "code" appears anywhere in the given string, except we'll accept any letter for the 'd', so "cope" and "cooe" count.`countCode("aaacodebbb") → 1`countCode("codexxcode") → 2`countCode("cozexxcope") → 2
5;Array / firstLast6;Given an array of ints, return true if 6 appears as either the first or last element in the array. The array will be length 1 or more.`firstLast6([1, 2, 6]) → true`firstLast6([6, 1, 2, 3]) → true`firstLast6([13, 6, 1, 2, 3]) → false
6;Array / commonEnd;Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more.`commonEnd([1, 2, 3], [7, 3]) → true`commonEnd([1, 2, 3], [7, 3, 2]) → false`commonEnd([1, 2, 3], [1, 3]) → true
7;Array / countEvens;Return the number of even ints in the given array. Note: the % "mod" operator computes the remainder, e.g. 5 % 2 is 1.`countEvens([2, 1, 2, 3, 4]) → 3`countEvens([2, 2, 0]) → 3`countEvens([1, 3, 5]) → 0
8;Array / sum13;Return the sum of the numbers in the array, returning 0 for an empty array. Except the number 13 is very unlucky, so it does not count and numbers that come immediately after a 13 also do not count.`sum13([1, 2, 2, 1]) → 6`sum13([1, 1]) → 2`sum13([1, 2, 2, 1, 13]) → 6
9;Logic / 
10;Logic
11;Logic
12;Logic
13;String
14;String
15;String
16;String
17;Recursion
18;Recursion
19;Recursion
20;Recursion
